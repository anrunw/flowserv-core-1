# This file is part of the Reproducible and Reusable Data Analysis Workflow
# Server (flowServ).
#
# Copyright (C) 2019-2021 NYU.
#
# flowServ is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Workflow storage manager that uses a SSH client to connect to a remote
server where run files are maintained.
"""

from typing import IO, List, Optional, Tuple

import paramiko

from flowserv.controller.volume.base import StorageVolume
from flowserv.model.files.base import IOHandle
from flowserv.util.ssh import SSHClient

import flowserv.util as util


# -- File handles -------------------------------------------------------------

class SFTPFile(IOHandle):
    """Implementation of the IO object handle interface for files that are
    stored on a remote file system.
    """
    def __init__(self, filename: str, client: SSHClient):
        """Initialize the file name that points to a remote file and the SSH
        client that is used to open the file.

        Parameters
        ----------
        filename: string
            Path to an existing file on disk.
        client: flowserv.util.ssh.SSHClient
            SSH client for accessing the remote server.
        """
        self.filename = filename
        self.client = client

    def open(self) -> IO:
        """Get file contents as a BytesIO buffer.

        Returns
        -------
        io.BytesIO

        Raises
        ------
        flowserv.error.UnknownFileError
        """
        sftp = self.sftp()
        try:
            return sftp.open(self.filename, 'rb')
        finally:
            sftp.close()

    def size(self) -> int:
        """The size of a remote file is unknown.

        Returns
        -------
        int
        """
        return None


class RemoteStorage(StorageVolume):
    """File storage volume that connects to a remote server via sftp."""
    def __init__(self, client: SSHClient, remotedir: str, identifier: Optional[str] = None):
        """Initialize the storage base directory on the remote server and the
        SSH connection client.

        The remote base directory is created if it does not exist. If no
        identifier is provided a unique identifier is generated by the super
        class constructor.

        Parameters
        ----------
        client: flowserv.util.ssh.SSHClient
            SSH client for accessing the remote server.
        remotedir: string
            Base directory for all run files on the remote file system.
        identifier: string
            Unique identifier.
        """
        super(RemoteStorage, self).__init__(identifier=identifier)
        self.client = client
        self.remotedir = remotedir
        # Create the remote directory if it does not exists.
        sftp_mkdir(client=client.sftp(), dirpath=self.remotedir)

    def close(self):
        """Close the SSH connection when workflow execution is done."""
        self.client.close()

    def erase(self):
        """Erase the storage volume base directory and all its contents."""
        # Collect sub-directories that need to be removed separately after
        # the directories are empty.
        directories = set()
        sftp = self.client.sftp()
        # Get recursive list of all files in the base folder and delete them.
        for key, filename in self.client.walk(self.remotedir):
            dirname = util.filepath(filename=key, sep=self.client.sep) if key else None
            if dirname is not None:
                directories.add(dirname)
                f = self.client.sep.join([dirname, filename])
            else:
                f = filename
            sftp.remove(self.client.sep.join([self.remotedir, f]))
        for dirpath in sorted(directories, reverse=True):
            sftp.rmdir(self.client.sep.join([self.remotedir, dirpath]))
        # Delete the remote base directory itself.
        sftp.rmdir(self.remotedir)

    def load(self, src: str) -> IOHandle:
        """Load a file object at the source path of this volume store.

        Returns a file handle that can be used to open and read the file.

        Parameters
        ----------
        src: str
            Path to a file object in the storage volume.
        """
        # The file key is a path expression that uses '/' as the path separator.
        # If the local OS uses a different separator we need to replace it.
        filename = util.filepath(filename=src, sep=self.client.sep)
        filename = self.client.sep.join([self.remotedir, filename])
        return SFTPFile(filename=filename, client=self.client)

    def store(self, file: IOHandle, dst: str):
        """Store a given file object at the destination path of this volume
        store.

        Parameters
        ----------
        file: flowserv.volume.base.IOHandle
            File-like object that is being stored.
        dst: str
            Destination path for the stored object.
        """
        # The file key is a path expression that uses '/' as the path separator.
        # If the local OS uses a different separator we need to replace it.
        filename = util.filepath(filename=dst, sep=self.client.sep)
        filename = self.client.sep.join([self.remotedir, filename])
        dirname = self.client.sep.join(filename.split(self.client.sep)[:-1])
        sftp = self.client.sftp()
        try:
            sftp_mkdir(client=sftp, dirpath=dirname)
            with sftp.open(filename, 'wb') as fout:
                with file.open() as fin:
                    fout.write(fin.read())
        finally:
            sftp.close()

    def walk(self, src: str) -> List[Tuple[str, IOHandle]]:
        """Get list of all files at the given source path.

        If the source path references a single file the returned list will
        contain a single entry. If the source specifies a folder the result
        contains a list of all files in that folder and the subfolders.

        Parameters
        ----------
        src: str
            Source path specifying a file or folder.

        Returns
        -------
        list of tuples (str, flowserv.volume.base.IOHandle)
        """
        files = self.client.walk()
        if files is None:
            # The source path references a single file.
            filename = util.filepath(filename=src, sep=self.client.sep)
            filename = self.client.sep.join([self.remotedir, filename])
            return [(src, SFTPFile(filename=filename, client=self.client))]
        else:
            # The source path references a directory.
            return [(key, SFTPFile(filename=filename, client=self.client)) for filename, key in files]


# -- Helper functions ---------------------------------------------------------

def sftp_mkdir(client: paramiko.SFTPClient, dirpath: str):
    """Create a directory on the remote server.

    ----------
    client: paramiko.SFTPClient
        SFTP client.
    dirpath: string
        Path to the created directory on the remote server.
    """
    try:
        # Attempt to change into the directory. This will raise an error
        # if the directory does not exist.
        client.chdir(dirpath)
    except IOError:
        # Create directory if it does not exist.
        client.mkdir(dirpath)
