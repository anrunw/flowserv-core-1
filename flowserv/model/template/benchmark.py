# This file is part of the Reproducible Open Benchmarks for Data Analysis
# Platform (ROB).
#
# Copyright (C) 2019 NYU.
#
# ROB is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Base classes for benchmarks that are maintained by the API in a benchmark
repository.
"""

from flowserv.model.template.base import WorkflowTemplate


class BenchmarkHandle(object):
    """Each benchmark is associated with a workflow template. The handle
    contains information about the benchmark that is maintained in addition to
    the workflow template.

    The workflow template may be loaded on demand through the given template
    repository. The main reason is that for benchmark listings we do not need
    to load the templates for all benchmarks immediately. When loading the
    template on demand it is assumed that the benchmark identifier is the same
    as the template identifier.
    """
    def __init__(
        self, identifier, name=None, description=None, instructions=None,
        template=None, result_id=None, repo=None
    ):
        """Initialize the handle properties. If no name is given the
        identifier is used as a name.

        If both, the template and the repository are None an error is raised
        since it would be impossible to access the associated workflow template.

        Parameters
        ----------
        identifier: string
            Unique benchmark identifier
        name: string, optional
            Descriptive benchmark name
        description: string, optional
            Optional short description for display in benchmark listings
        instructions: string, optional
            Text containing detailed instructions for benchmark participants
        template: flowserv.model.template.base.WorkflowTemplate, optional
            Template for the associated workflow
        result_id: string
            Unique identifier of the current post-processing result set
        repo: flowserv.model.template.repo.benchmark.BenchmarkRepository, optional
            Template repository to load the template on demand.

        Raises
        ------
        ValueError
        """
        # Raise an error if both, the template and the repository are None
        if template is None and repo is None:
            raise ValueError('no workflow template given')
        self.identifier = identifier
        self.name = name if not name is None else identifier
        self.description = description
        self.instructions = instructions
        self.template = template
        self.result_id = result_id
        self.repo = repo

    def get_description(self):
        """Get value of description property. If the value of the property is
        None an empty string is returned instead.

        Returns
        -------
        string
        """
        return self.description if not self.description is None else ''

    def get_instructions(self):
        """Get value of instructions property. If the value of the property is
        None an empty string is returned instead.

        Returns
        -------
        string
        """
        return self.instructions if not self.instructions is None else ''

    def get_resources(self):
        """Get list of descriptors for resources that are generated by the
        (optional) post-processing tasks. If the template does not have a
        post-processing task, an empty list is returned.

        Returns None if no post-processing resources were defined for the
        benchmark in the workflow template.

        Returns
        -------
        flowserv.model.template.benchmark.BenchmarkResources
        """
        # Load template if None
        if self.template is None:
            self.template = self.repo.template_repo.get_template(self.identifier)
        # Return list of prost-processing outputs
        if self.template.postproc_task is not None:
            return BenchmarkResources(
                result_id=self.result_id,
                values=list(self.template.postproc_task.outputs.values())
            )
        else:
            return None

    def get_template(self, workflow_spec=None, parameters=None):
        """Get associated workflow template. The template is loaded on-demand
        if necessary. If either of the optional parameters are given, a modified
        copy of the template is returned.

        Returns
        -------
        flowserv.model.template.base.WorkflowTemplate
        """
        # Load template if None
        if self.template is None:
            self.template = self.repo.template_repo.get_template(self.identifier)
        # If any of the optional parameters are given return a modified copy of
        # the workflow template.
        if workflow_spec and parameters:
            return WorkflowTemplate(
                identifier=self.template.identifier,
                workflow_spec=workflow_spec,
                parameters=parameters,
                source_dir=self.template.source_dir,
                result_schema=self.template.result_schema,
                modules=self.template.modules
            )
        elif workflow_spec:
            return WorkflowTemplate(
                identifier=self.template.identifier,
                workflow_spec=workflow_spec,
                parameters=self.template.parameters,
                source_dir=self.template.source_dir,
                result_schema=self.template.result_schema,
                modules=self.template.modules
            )
        elif parameters:
            return WorkflowTemplate(
                identifier=self.template.identifier,
                workflow_spec=self.template.workflow_spec,
                parameters=parameters,
                source_dir=self.template.source_dir,
                result_schema=self.template.result_schema,
                modules=self.template.modules
            )
        return self.template

    def has_description(self):
        """Shortcut to test of the description attribute is set.

        Returns
        -------
        bool
        """
        return not self.description is None

    def has_instructions(self):
        """Test if the instructions for the benchmark are set.

        Returns
        -------
        bool
        """
        return not self.instructions is None


# -- Benahcmark resource information ------------------------------------------

class BenchmarkResources(object):
    """Wrapper for benahcmark post-processing resource information. Maintains
    the list of resource definitions and the identifier of the most recent
    benchmark post-processing run.
    """
    def __init__(self, result_id, values):
        """Initialize the object properties.

        Parameters
        ----------
        result_id: string
            Unique identifier of the post-processing result set
        values: list(flowserv.model.resource.ResourceDescriptor)
            List of descriptors for post-processing resources
        """
        self.result_id = result_id
        self.values = values

    def __iter__(self):
        """Make list of resource descriptors iterable.

        Returns
        -------
        iterator
        """
        return iter(self.values)
