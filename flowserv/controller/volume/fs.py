# This file is part of the Reproducible and Reusable Data Analysis Workflow
# Server (flowServ).
#
# Copyright (C) 2019-2021 NYU.
#
# flowServ is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""File system workflow storage volume. Maintains workflow run files in
a folder on the local file system.
"""

from pathlib import Path
from typing import Optional, Tuple

import os
import shutil

from flowserv.controller.volume.base import StorageVolume
from flowserv.model.files.base import IOHandle
from flowserv.model.files.fs import FSFile, copy_folder


class FileSystemStorage(StorageVolume):
    """The file system storage volume provides access to workflow run
    files that are maintained in a run directory on the local file system.
    """
    def __init__(self, basedir: str, identifier: Optional[str] = None):
        """Initialize the run base directory and the unique volume
        identifier.

        The base directory is created if it does not exist. If no identifier is
        provided a unique identifier is generated by the super class constructor.

        Parameters
        ----------
        basedir: string
            Base directory for all run files on the local file system.
        identifier: string
            Unique identifier.
        """
        super(FileSystemStorage, self).__init__(identifier=identifier)
        self.basedir = basedir
        os.makedirs(self.basedir, exist_ok=True)

    def close(self):
        """The file system runtime manager has no connections to close or
        resources to release.
        """
        pass

    def download(self, src: str, dst: str):
        """Download the file or folder at the source path to the given
        destination.

        The source path is relative to the base directory for the workflow run.
        The destination path is absolute or relative to the current working
        directory.

        Parameters
        ----------
        src: string
            Relative source path on the volume run directory.
        dst: string
            Absolute or relative path on the local file system.
        """
        # Create the absolute source path.
        source = os.path.join(self.basedir, src)
        # Ensure that the parent folder for the destination file exists.
        os.makedirs(Path(dst).parent.absolute(), exist_ok=True)
        if os.path.isdir(source):
            shutil.copytree(src=source, dst=dst)
        else:
            shutil.copy(src=source, dst=dst)

    def erase(self):
        """Erase the storage volume base directory and all its contents."""
        shutil.rmtree(self.basedir)

    def upload(self, src: Tuple[IOHandle, str], dst: str):
        """Upload a file or folder to the storage volume.

        The destination is relative to the base directory of the storage
        volume.

        Parameters
        ----------
        src: string or flowserv.model.files.base.IOHandle
            Source file or folder that is being uploaded to the storage volume.
        dst: string
            Relative target path for the uploaded files.
        """
        # Create the absolute target path.
        target = os.path.join(self.basedir, dst)
        if isinstance(src, IOHandle):
            src.store(filename=target)
        elif os.path.isdir(src):
            copy_folder(src=src, dst=target)
        else:  # assume that src points to a file on the local file system.
            FSFile(filename=src).store(filename=target)
