
    def download(self, src: str, dst: str):
        """Download the file or folder at the source path to the given
        destination.

        The source path is relative to the base directory for the workflow run.
        The destination path is absolute or relative to the current working
        directory.

        Parameters
        ----------
        src: string
            Relative source path on the storage volume run directory.
        dst: string
            Absolute or relative path on the local file system.
        """
        # Get the sftp client.
        sftp = self.client.sftp()
        # Ensure that the parent folder for the destination file exists.
        os.makedirs(Path(dst).parent.absolute(), exist_ok=True)
        # Recursively walk through the remote folder to get the list of all
        # files that need to be copied. If the src points to a file the result
        # of the walk will be empty.
        source = os.path.join(self.remotedir, src)
        files = walk(client=sftp, dirpath=source)
        if files is not None:
            # Create all target directories before downloading files.
            for dirpath in {dp for dp, _ in files if dp}:
                os.makedirs(os.path.join(dst, dirpath), exist_ok=True)
            # Download files.
            for dirpath, filename in files:
                if dirpath:
                    srcpath = os.path.join(source, dirpath, filename)
                    dstpath = os.path.join(dst, dirpath, filename)
                else:
                    srcpath = os.path.join(source, filename)
                    dstpath = os.path.join(dst, filename)
                sftp.get(srcpath, dstpath)
        else:
            sftp.get(source, dst)


    def upload(self, src: Tuple[IOHandle, str], dst: str):
        """Upload a file or folder to the storage volume.

        The destination is relative to the base directory of the storage
        volume.

        Parameters
        ----------
        src: string or flowserv.model.files.base.IOHandle
            Source file or folder that is being uploaded to the storage volume.
        dst: string
            Relative target path for the uploaded files.
        """
        # Get the sftp client.
        sftp = self.client.sftp()
        # Ensure that all directories exist on the remote server.
        directories = list()
        parent, _ = os.path.split(dst)
        while parent:
            directories.append(parent)
            parent, _ = os.path.split(parent)
        while directories:
            dirpath = directories.pop()
            sftp_mkdir(client=sftp, dirpath=os.path.join(self.remotedir, dirpath))
        # Create the absolute target path.
        target = os.path.join(self.remotedir, dst)
        if isinstance(src, IOHandle):
            with sftp.open(target, 'w') as f:
                f.write(src.open().read())
        elif os.path.isdir(src):
            copy_folder(client=sftp, src=src, dst=target)
        else:  # assume that src points to a file on the local file system.
            sftp.put(src, target)



    def download(self, src: str, dst: str):
        """Download the specified source file to a given target path.

        Parameters
        ----------
        src: string
            Path to source file on the remote server.
        dst: string
            Destination path for the downloaded file.
        """
        # Get a new SFTP client.
        sftp = self.sftp()
        try:
            sftp.get(src, dst)
        finally:
            sftp.close()


    def upload(self, files: List[Tuple[str, str]], directories: List[str]):
        """Upload a given list of files.

        Files are given as pairs of source and target path. The list of unique
        target directories contains the list of all directories that need to
        exist on the remote server for the uploaded files. These directories
        are created in advance before attempting to upload the files.

        Parameters
        ----------
        files: list of tuples of (string, string)
            Source and target path for uploaded files. All path expressions
            should be absolute paths expressions.
        directories: list of string
            List of target directories that need to exist on the remove server.
            These directories will be created if they don't exist.
        """
        # Get a new SFTP client.
        sftp = self.sftp()
        try:
            # Attempt to create all required target directories on the remote
            # server first.
            for dirpath in directories:
                try:
                    sftp.mkdir(dirpath)
                except Exception:
                    pass
            # Upload the files.
            for src, dst in files:
                sftp.put(src, dst, confirm=True)
        finally:
            sftp.close()

