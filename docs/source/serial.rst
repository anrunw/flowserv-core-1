Templates for Serial Workflows
==============================

Workflow templates have two parts: the workflow specification and the parameter declaration.

Workflow Specification
----------------------

The workflow specification has two main parts: the specification of input and output files, and the list of workflow steps.

The files section defines the static input files and the output files that are generated by a successful workflow run. The input files section defines unique identifier for all static files (files or directories). These are key,value-pairs where the key is the unique file identifier and the value is a relative path to the file or directory in the run directory. These files together with the files that are defined as workflow parameters form the context (environment) for the workflow that is present in the run directory. Output files are simply identified by their relative file path n the run directory. **All file names are relative path names**.

The steps section defines the individual workflow steps. This is a list of workflow steps, each of which is identified by a unique name, has an optional environment identifier, a list of required input and output files (referenced by their unique file identifier) and a list of workflow steps (this is only for container steps). Input files


.. code-block:: yaml

    workflow:
        files:
            inputs:
            - code: code/  # File names that end with a / specify directories.
            outputs:
            - results/score.json
              results/greetings.txt
        parameters:
        - names: $[[names]]
        steps:
        - name: my-step  # Is this name really necessary? How to specify user-defined steps.
          environment: none
          files:
            inputs:
            - code
            - names
            outputs:
            - results/greetings.txt
          commands:
          - python code/helloworld.py


When the workflow starts a run directory is created on the server. This is a physical directory that will maintain all the generated output files from the different steps that may need to be copied in between storage volumes. After the workflow complete successfully, the run directory will only contain the final output files that were specified in the ``workflow/files/outputs`` section. Associated with the workflow run is a ``VolumeManager``. The manager maintains the list of different storage volumes and it knows which files are stored on which volume. This information is necessary for preparing the environments for different workers when executing workflow steps.

QUESTION: How to deal with notebook steps where the user submits a notebook file that was not initially defined as a parameter but is part of a user-defined step.


Config - Env
------------

A default local file system environment will be created (using the default FLOWSERV_RUNSDIR) value. This environment is assigned to any worker that does not specify the environment.


.. code-block:: yaml

    workers:
        - name: 'unique id'
          env: 'environment-name'
          type: 'worker-type'
          config:
            image: ''
            args:
                key: 'value'
            implementation
    environments:
        - name: 'unique name'
          type: 'type identifier'

    workflow:
        - image: ''
          worker: ''
        - step: ''
          worker: ''
