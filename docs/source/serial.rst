Templates for Serial Workflows
==============================

**Serial workflows** are sequences of workflow steps. These workflows are executed by the ``flowserv.controller.serial.engine.base.SerialWorkflowEngine``. Each step in the workflow is executed by a dedicated worker (``flowserv.controller.serial.worker.base.Worker``).

The workflow template for serial workflows has three main parts: (i) the specification of input and output files, (ii) the list of template parameters, and (iii) the list of workflow steps. An example specification for a serial workflow is shown below:


.. code-block:: yaml

    workflow:
        files:
            inputs:
            - code/
            outputs:
            - results/score.json
              results/greetings.txt
        parameters:
        - names: $[[names]]
        - greetings: $[[greetings]]
        - sleep: $[[sleep_time]]
        steps:
        - files:
            inputs:
            - code/helloworld.py
            - "${names}"
            outputs:
            - results/greetings.txt
          action:
            environment: python:3.7
            commands:
            - ${python} code/helloworld.py \
                --input="${names}" \
                --greeting="${greetings}" \
                --sleep=${sleep} \
                --output=results/greetings.txt


Workflow Input and Output Files
-------------------------------

The optional ``files`` section defines (a) the static input files that are available to a workflow run, and (b) the output files that are generated by a successful workflow run. The input files section defines the static files and directories that are part of the workflow template. These files together with the files that are defined as workflow parameters form the context (*environment*) for the workflow that are available to a workflow at the start of a workflow run. Output files are files that are retained after the workflow run completes successfully. Note that **all file names are relative path names** using ``/`` as the path delimiter.


Template Parameters
-------------------

The optional ``parameters`` section defines the template parameters that are available in the environment for a workflow run. The parameter values are given as a dictionary to the workers for individual workflow steps. The values are for example used to replace variable references in command line statements with values that a user provided (e.g., via a GUI) when initiating the workflow run.


Workflow Steps
--------------

The mandatory ``steps`` section defines the list of individual workflow steps. Each workflow step has an optional ``files`` section. This section is similar to the global files specification for the workflow. It defines the required inputs for the worker that executes the workflow step, as well as the outputs that should be retained and made available to following workflow steps or as part of the workflow result. One difference to the global files list is that the files list for workflow steps can contain references to user-provided template parameters. If the files section is not given, no guarantees are made about the files that are available for a worker. If all worker access the same storage volume then all run files may be available to each worker. However, it is goof practice to explicitly specify the inputs and outputs for each workflow step if required by a worker.

The mandatory ``action`` part of the workflow step defines the action of the step. The format is dependent on the type of worker that is used for the step. This part can also be replaced with a user-defined step. For example, a step that is executed by a container worker will have mandatory elements ``environment`` and ``commands``. The environment defines the container image and the commands gives the list of command line commands that are executed with in the defined container.

Note that container steps are not necessarily executed in a Docker container. The workers configuration (see below) allows the user to specify the particular type of container worker, e.g., to execute the commands in the Python environment that runs the **flowServ** application using a ``flowserv.controller.serial.worker.subprocess.SubprocessWorker`` that uses Python's ``multiprocess`` module to run the commands.


Workflow Execution
------------------

The serial workflow engine is associated with a dedicated storage volume for workflow runs. At the beginning of a workflow execution, a run directory is created on that storage volume. This is a physical directory that will maintain all the generated output files from the different steps that may need to be copied in between storage volumes. After the workflow complete successfully, the run directory will only contain the final output files that were specified in the ``workflow/files/outputs`` section. Associated with the workflow run is a ``VolumeManager``. The manager maintains the list of different storage volumes and it knows which files are stored on which volume. This information is necessary for preparing the environments for different workers when executing workflow steps.


Config - Env
------------

A default local file system environment will be created (using the default FLOWSERV_RUNSDIR) value. This environment is assigned to any worker that does not specify the environment.


.. code-block:: yaml

    workers:
        - name: 'unique id'
          env: 'environment-name'
          type: 'worker-type'
          config:
            image: ''
            args:
                key: 'value'
            implementation
    environments:
        - name: 'unique name'
          type: 'type identifier'

    workflow:
        - image: ''
          worker: ''
        - step: ''
          worker: ''
