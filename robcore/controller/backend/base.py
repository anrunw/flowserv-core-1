# This file is part of the Reproducible Open Benchmarks for Data Analysis
# Platform (ROB).
#
# Copyright (C) 2019 NYU.
#
# ROB is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Abstract interface for the workflow controller. The controller provides
methods to start and cancel the execution of workflows, as well as methods that
poll the current state of a workflow.

The aim of an abstract workflow controller is to keey the reproducible benchmark
engine flexible with respect to the workflow engine that is being used. The
implementation of the controller can either orchestrate the execution of a
workflow iteself or be a wrapper around an existing workflow engine. An example
for latter is a workflow controller that wrapps around the REANA workflow
engine.

The implementation of the controller is responsible for interpreting a given
workflow template and a set of template parameter arguments. The controller is
also responsible for retrieving output files and for providing access to these
files.
"""

from abc import abstractmethod


class WorkflowController(object):
    """The workflow controller is used to start execution of workflow templates
    for a given set of template parameter arguments, as well as to poll the
    state of workflow execution and to cancel execution.

    Workflow executions, referred to as runs, are identified by unique run ids
    that are assigned by components that are outside of the controller.
    Implementations of the controller are responsible for maintaining a mapping
    of these run identifiers to any indentifiers that are generated by the
    workflow engine.
    """
    @abstractmethod
    def asynchronous_events(self):
        """Flag indicating whether the controller will update the workflow state
        in the underlying database asynchronously.

        Returns
        -------
        bool
        """
        raise NotImplementedError()

    @abstractmethod
    def cancel_run(self, run_id):
        """Request to cancel execution of the given run.

        Parameters
        ----------
        run_id: string
            Unique run identifier

        Raises
        ------
        robcore.error.UnknownRunError
        """
        raise NotImplementedError()

    @abstractmethod
    def exec_workflow(self, run_id, template, arguments):
        """Initiate the execution of a given workflow template for a set of
        argument values. Returns the state of the workflow.

        The client provides a unique identifier for the workflow run that is
        being used to retrieve the workflow state in future calls.

        Parameters
        ----------
        run_id: string
            Unique identifier for the workflow run.
        template: robcore.model.template.base.WorkflowTemplate
            Workflow template containing the parameterized specification and the
            parameter declarations
        arguments: dict(robcore.model.template.parameter.value.TemplateArgument)
            Dictionary of argument values for parameters in the template

        Returns
        -------
        robcore.model.workflow.state.WorkflowState
        """
        raise NotImplementedError()

    @abstractmethod
    def get_run_state(self, run_id):
        """Get the status of the workflow with the given identifier.

        Parameters
        ----------
        run_id: string
            Unique run identifier

        Returns
        -------
        robcore.model.workflow.state.WorkflowState

        Raises
        ------
        robcore.error.UnknownRunError
        """
        raise NotImplementedError()

    @abstractmethod
    def modify_template(self, workflow_spec, tmpl_parameters, add_parameters):
        """Modify a given workflow specification by adding the given parameters
        to a given set of template parameters.

        This function is dependent on the workflow specification syntax that is
        supported by a workflow engine.

        Returns the modified workflow specification and the modified parameter
        index. Raises an error if the parameter identifier in the resulting
        parameter index are no longer unique.

        Parameters
        ----------
        workflow_spec: dict
            Workflow specification
        tmpl_parameters: dict(robcore.model.template.parameter.base.TemplateParameter)
            Existing template parameters
        add_parameters: dict(robcore.model.template.parameter.base.TemplateParameter)
            Additional template parameters

        Returns
        -------
        dict, dict(robcore.model.template.parameter.base.TemplateParameter)

        Raises
        ------
        robcore.error.DuplicateParameterError
        robcore.error.InvalidTemplateError
        """
        raise NotImplementedError()

    @abstractmethod
    def remove_run(self, run_id):
        """Clear internal resources for the given run.

        Parameters
        ----------
        run_id: string
            Unique run identifier

        Raises
        ------
        robcore.error.UnknownRunError
        """
        raise NotImplementedError()
