# This file is part of the Reproducible Open Benchmarks for Data Analysis
# Platform (ROB).
#
# Copyright (C) [2019-2020] NYU.
#
# ROB is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Command information for steps in a sequential workflow. Each step has an
environment associated with it. The step contains a list of command line
statements that are executed in the specified environment.
"""

from robcore.model.resource import ResourceDescriptor

import robcore.core.error as err


"""Labels for object serialization."""
LABEL_COMMANDS = 'commands'
LABEL_ENV = 'environment'
LABEL_INPUTS = 'inputs'
LABEL_MOUNTS = 'mount'
LABEL_OUTPUTS = 'outputs'


class Step(object):
    """List of commands that are executed in a given environment. The
    environment can, for example, specify a Docker image.
    """
    def __init__(self, env, commands=None):
        """Initialize the object properties.

        Parameters
        ----------
        env: string
            Execution environment name
        commands: list(string), optional
            List of command line statements
        """
        self.env = env
        self.commands = commands if commands is not None else list()

    def add(self, cmd):
        """Append a given command line statement to the list of commands in the
        workflow step.

        Parameters
        ----------
        cmd: string
            Command line statement

        Returns
        -------
        robcore.model.template.command.Step
        """
        self.commands.append(cmd)
        return self

    @staticmethod
    def from_dict(doc):
        """Create class instance from dictionary serialization.

        Parameters
        ----------
        doc: dict
            Dictionary serialization for workflow step

        Returns
        -------
        robcore.model.template.command.Step
        """
        return Step(
            env=doc[LABEL_ENV],
            commands=doc[LABEL_COMMANDS] if LABEL_COMMANDS in doc else None
        )

    def to_dict(self):
        """Get dictionary serialization for the workflow step object.

        Returns
        -------
        dict
        """
        return {LABEL_ENV: self.env, LABEL_COMMANDS: self.commands}


class PostProcessingStep(Step):
    """Step in a sequence of post-processing actions for workflows. Each task
    is executed within a Docker container. This class extends the workflow
    step with information about the mount volumes, the required input files as
    well as metadata about the generated output files.
    """
    def __init__(self, env, commands=None, mounts=None, inputs=None, outputs=None):
        """Initialize the object properties.

        Parameters
        ----------
        env: string
            Execution environment name
        commands: list(string), optional
            List of command line statements
        mounts: list(string), optional
            List of directories in the benchmark folder that are mounted into
            the Docker container
        inputs: list(string), optional
            List of identifier for file resources that are generated by
            successful workflow runs and provided to the post-processing step
            as inputs
        outputs: dict(robcore.mode.resource.ResourceDescriptor), optional
            Dictionary of descriptors for resources that are generated by the
            task
        """
        super(PostProcessingStep, self).__init__(env=env, commands=commands)
        self.mounts = mounts if mounts is not None else list()
        self.inputs = inputs if inputs is not None else list()
        self.outputs = outputs if outputs is not None else dict()

    @staticmethod
    def from_dict(doc):
        """Create class instance from given dictionary serialization.

        Raise error if the identifier of given output resources are not unique.

        Parameters
        ----------
        doc: dict
            Dictionary serialization for post-processing step

        Returns
        -------
        robcore.model.template.command.PostProcessingStep
        """
        step = Step.from_dict(doc)
        # Create resource descriptors from serialization (if present)
        outputs = None
        if LABEL_OUTPUTS in doc:
            outputs = dict()
            for r in doc[LABEL_OUTPUTS]:
                desc = ResourceDescriptor.from_dict(r)
                if desc.identifier in outputs:
                    raise err.DuplicateResourceError(desc.identifier)
                outputs[desc.identifier] = desc
        return PostProcessingStep(
            env=step.env,
            commands=step.commands,
            mounts=doc[LABEL_MOUNTS] if LABEL_MOUNTS in doc else None,
            inputs=doc[LABEL_INPUTS] if LABEL_INPUTS in doc else None,
            outputs=outputs
        )

    def to_dict(self):
        """Get dictionary serialization for the post-processing step.

        Returns
        -------
        dict
        """
        doc = super(PostProcessingStep, self).to_dict()
        doc[LABEL_MOUNTS] = self.mounts
        doc[LABEL_INPUTS] = self.inputs
        doc[LABEL_OUTPUTS] = [r.to_dict() for r in self.outputs.values()]
        return doc
